DAY-01: 27-07-2023: INTRO, LIFECYCLE, BASIC FILES

INFRA: RESOURCE USED TO RUN OUR APPLICATION.
EX: SERVERS, ASG, ELB, VPC ----

1. ON-PREM: IT WAS MANAGED BY OUR IT TEAM.
2. CLOUD: CLOUD PROVIDERS (AWS, AZURE,GCP)

INFRA IN CLOUD IS CREATED MANUALLY TILL NOW:
LIMITATIONS:
1. MISTAKES WILL HAPPEN.
2. TAKES TIME.
3. INFRA CREATION LATE.

AUTOMATION:
DEVOPS: TERRAFORM, PULUMI, CHEF, ANSIBLE ----
CLOUD:
AWS - CFT
AZURE - ARM
GCP - GDE

HISTORY:

MITCHEL HASIMOTO -- > 2011 : TUMBLR -- > NO RESPONSE
YEAR: 2014
LANGUAGE: GO LANG
COMPANY: HASHICORP
TYPE: FREE AND OPENSOURCE
SPECIFICATION: INFRA CREATION
WHO IT WORKS: CODE -- > HCL (HASHICORP CONFIGURATION LANGUAGE)

ADVANTAGES:
1. AUTOMATION
2. TIME SAVING
3. REUSEABLE 
4. DRY RUN 
5. CLOUD AGONISTIC

installation:
sudo yum install -y yum-utils shadow-utils
sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
sudo yum -y install terraform

PERMISSION:
attach iam user creds to ec2

CONFIGURATION FILE: It has information about our resource.
EX: .tf, .tfvars 

cat main.tf

provider "aws" {
region = "eu-west-1"
}

resource "aws_instance" "one" {
count = 3
ami = "ami-06935448000742e6b"
instance_type = "t2.micro"
}

LIFECYCLE:
terrafrom init: it will download provider plugins.
terraform plan: it will create execution plan for resource.
terraform apply: it will create the resource.
terraform destroy: it will destroy the resource.

STATE FILE: It will store the resource infromation which created by terraform.
terrafrom state list: it will list resources inside the state file

TARGET: It will destroy a particular resource in terraform
terraform destroy -target="aws_instance.one[1]"

HISTORY:


    1  mkdir terraform
    2  cd terraform/
    3  sudo yum install -y yum-utils shadow-utils
    4  sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
    5  sudo yum -y install terraform
    6  terraform -v
    7  cd
    8  aws configure
    9  cd terraform/
   10  ll
   11  vim main.tf
   12  terraform init
   13  terraform plan
   14  terraform apply
   15  vim main.tf
   16  cd
   17  vim .aws/config
   18  cd terraform/
   19  terraform apply
   20  ll
   21  cat terraform.tfstate
   22  terraform state list
   23  terraform destroy
   24  cat terraform.tfstate
   25  vim main.tf
   26  terraform init
   27  terraform plan
   28  terraform apply
   29  cat terraform.tfstate
   30  terraform state list
   31  cat main.tf
   32  terraform state list
   33  terraform destroy -target="aws_instance.one[1]
   34  terraform destroy -target="aws_instance.one[1]"
   35  terraform state list
   36  terraform destroy -target="aws_instance.one[2]"
   37  terraform state list
   38  cat main.tf
   39  history

====================================================================================

OUTPUTS: It will print the resource outputs 

provider "aws" {
region = "eu-west-3"
}

resource "aws_instance" "one" {
ami = "ami-0b915513496b814ce"
instance_type = "t2.micro"
tags = {
Name = "raham-terra-server"
}
}

output "raham" {
value = [aws_instance.one.public_ip, aws_instance.one.private_ip, aws_instance.one.public_dns]
}


TERRAFORM REFRESH: it will refresh the state file and shows the objects existence.
TERRAFORM TAINT: it will recreate specific resource.

provider "aws" {
region = "eu-west-3"
}

resource "aws_instance" "one" {
ami = "ami-0b915513496b814ce"
instance_type = "t2.micro"
tags = {
Name = "raham-terra-server"
}
}

resource "aws_s3_bucket" "two" {
bucket = "rahamterra443357-swiggy"
}

terraform taint aws_instance.one 
terraform apply --auto-approve


UNTAINT: To undo the tainting.
terraform untaint aws_s3_bucket.two


ALIAS & PROVIDERS:
it is used to create multiple resource on multiple regions at a time.

provider "aws" {
region = "eu-west-3"
}


resource "aws_instance" "one" {
ami = "ami-0b915513496b814ce"
instance_type = "t2.micro"
tags = {
Name = "raham-terra-server"
}
}

provider "aws" {
region = "eu-west-2"
alias = "london"
}

resource "aws_instance" "two" {
provider = aws.london
ami = "ami-0b594cc165f9cddaa"
instance_type = "t2.micro"
tags = {
Name = "raham-terra-server"
}
}

HISTORY:

 1  mkdir terraform
    2  cd terraform/
    3  sudo yum install -y yum-utils shadow-utils
    4  sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
    5  sudo yum -y install terraform
    6  aws configure
    7  vim mai.tf
    8  vim main.tf
    9  terraform init
   10  terraform
   11  terraform plan
   12  terraform apply --auto-approve
   13  vim main.tf
   14  wq
   15  terraform apply --auto-approve
   16  vim main.tf
   17  terraform apply --auto-approve
   18  terraform destroy --auto-approve
   19  vim main.tf
   20  terraform apply --auto-approve
   21  vim main.tf
   22  cat main.tf
   23  terraform apply --auto-approve
   24  vim main.tf
   25  terraform apply --auto-approve
   26  vim main.tf
   27  terraform state list
   28  terraform refresh
   29  terraform state list
   30  vim main.tf
   31  terraform apply --auto-approve
   32  terraform state list
   33  terraform taint aws_instance.one
   34  terraform apply --auto-approve
   35  terraform state list
   36  terraform taint aws_s3_bucket.two
   37  terraform apply --auto-approve
   38  cat main.tf
   39  terraform state list
   40  terraform taint aws_s3_bucket.two
   41  terraform untaint aws_s3_bucket.two
   42  vim main.tf
   43  terraform destroy --auto-approve
   44  vim main.tf
   45  terraform appl\y --auto-approve
   46  terraform apply --auto-approve
   47  terraform apply --auto-approve -lock=false
   48  ps
   49  kill -9 1427 1399 1433 1449 1463 1469
   50  ps
   51  terraform apply --auto-approve -lock=false
   52  terraform destroy --auto-approve
   53  vim main.tf
   54  terraform apply --auto-approve -lock=false
   55  vim main.tf
   56  terraform apply --auto-approve
   57  vim main.tf
   58  history

========================================

DAY-04: 1-08-2023: LOCAL, VPC, SUBNET, WORKSPACE, VALIDATE, GRAPH


TERRAFORM VALIDATE: It will validte the terraform files. (syntax check)

LOCALS: we use this block to define the values for resources.
we can define value once and use this multiple times.
Adv: we can modify the value once and rest will change automatically.

provider "aws" {
region = "eu-west-3"
}

locals {
Name = "devserver"
}

resource "aws_instance" "one" {
ami = "ami-0b915513496b814ce"
instance_type = "t2.micro"
tags = {
Name = "${local.Name}"
}
}




provider "aws" {
region = "eu-west-3"
}

locals {
Name = "test"
}

resource "aws_vpc" "one" {
cidr_block = "10.0.0.0/16"
tags = {
Name = "${local.Name}-vpc"
}
}

resource "aws_subnet" "two" {
vpc_id = aws_vpc.one.id
cidr_block = "10.0.0.0/24"
tags = {
Name = "${local.Name}-subnet"
}
}

resource "aws_instance" "three" {
subnet_id = aws_subnet.two.id
ami = "ami-0b915513496b814ce"
instance_type = "t2.micro"
tags = {
Name = "${local.Name}-instance"
}
}


TERRAFORM GRAPH: It will show the blueprint(flow chart) of terraform resource creation.
linK: graphwiz online
copy past the content on this site.

https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route_table.html


WORKSPACE: it is used to isloate the environments.
each action we apply on one workspace will not effect another workspace.
in real time we use the workspace to create dev, test --- envs
Note: 
1. To delete workspace it should be empty.
2. We cant delete current workspace.
2. we cant Default workspace (it will not create any resource)


terraform workspace list	: lists the workspaces
terraform workspace new dev	: creates workspace
terraform workspace show	: shows the current workspace
terraform workspace select dev	: switch to dev workspace
terraform workspace delete dev	: to delete dev workspace


provider "aws" {
region = "eu-west-3"
}

locals {
Name = "${terraform.workspace}"
}

resource "aws_instance" "three" {
ami = "ami-0b915513496b814ce"
availability_zone = "eu-west-3b"
key_name = "terraform"
instance_type = "t2.medium"
tags = {
Name = "${local.Name}-instance"
}
}

history:

67  terraform state list
   68  vim main.tf
   69  terraform init
   70  terraform validate
   71  terraform plan
   72  terraform apply --auto-approve
   73  vim main.tf
   74  terraform destroy --auto-approve
   75  vim main.tf
   76  terraform plan
   77  vim main.tf
   78  terraform plan
   79  vim main.tf
   80  terraform plan
   81  terraform apply --auto-approve
   82  vim main.tf
   83  terraform apply --auto-approve
   84  terraform state list
   85  terraform graph
   86  terraform workspace list
   87  terraform workspace new dev
   88  terraform workspace list
   89  terraform workspace show
   90  terraform workspace select default
   91  terraform destroy --auto-approve
   92  terraform workspace select dev
   93  vim main.tf
   94  terraform apply --auto-approve
   95  terraform state list
   96  terraform workspace new test
   97  terraform apply --auto-approve
   98  terraform workspace new prod
   99  vim main.tf
  100  terraform apply --auto-approve
  101  terraform state list
  102  terraform workspace delete prod
  103  terraform destroy --auto-approve
  104  terraform worspace list
  105  terraform workspace list
  106  terraform workspace delete prod
  107  terraform workspace select test
  108  terraform workspace delete prod
  109  terraform workspace list
  110  terraform state list
  111*
  112  terraform workspace list
  113  terraform workspace select dev
  114  terraform workspace delete test
  115  terraform workspace list
  116  terraform destroy --auto-approve
  117  terraform workspace select default
  118  terraform workspace delete dev
  119  terraform workspace list
  120  terraform workspace delete default
  121  vim main.tf
  122  terraform apply --auto-approve
  123  vim main.tf
  124  terraform apply --auto-approve
  125  vim main.tf
  126  aws ec2 stop-instances --instance-ids i-09d27f174f2d07bc1
  127  aws ec2 stop
  128  aws ec2 | frep -i stop
  129  aws ec2 | grep -i stop
  130  aws ec2 stop -h
  131  aws ec2 stop-instances --instance-ids i-0a9684385a12b8593
  132  aws ec2 stop-instances --instance-ids i-09d27f174f2d07bc1
  133  cat /root/.aws/config
  134  vim /root/.aws/config
  135  aws ec2 stop-instances --instance-ids i-09d27f174f2d07bc1
  136  vim /root/.aws/config
  137  aws ec2 stop-instances --instance-ids i-0a9684385a12b8593
  138  aws ec2 start-instances --instance-ids i-0a9684385a12b8593

==============================================================================

DAY-06:

TERRAFORM DYNMIC BLOCK:
It will help to reuse the code.it will reduce the lenght of code


WITHOUT DYNAMIC BLOCK:

resource "aws_security_group" "five" {
  name = "elb-sg"
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}






provider "aws" {
}

locals {
  ingress_rules = [{
    port        = 443
    },
    {
      port        = 80
  },
  {
      port        = 8080
  }]
}

resource "aws_instance" "ec2_example" {
  ami                    = "ami-0c02fb55956c7d316"
  instance_type          = "t2.micro"
  vpc_security_group_ids = [aws_security_group.main.id]
  tags = {
    Name = "Terraform EC2"
  }
}

resource "aws_security_group" "main" {

  egress = [
    {
      cidr_blocks      = ["0.0.0.0/0"]
      description      = "*"
      from_port        = 0
      ipv6_cidr_blocks = []
      prefix_list_ids  = []
      protocol         = "-1"
      security_groups  = []
      self             = false
      to_port          = 0
  }]

  dynamic "ingress" {
    for_each = local.ingress_rules

    content {
      description = "*"
      from_port   = ingress.value.port
      to_port     = ingress.value.port
      protocol    = "tcp"
      cidr_blocks = ["0.0.0.0/0"]
    }
  }

  tags = {
    Name = "terra sg"
  }
}



BACKEND S3:


provider "aws" {
}

terraform {
  backend "s3" {
    bucket = "mybucket"
    key    = "prod"
    region = "eu-west-3"
  }
}


resource "aws_instance" "one" {
  for_each = toset(["one", "two", "three"])
  ami           = "ami-06f7633a6b8e0fb0a"
  instance_type = "t2.micro"
  tags = {
    Name = "instance-${each.key}"
  }
}

resource "aws_ebs_volume" "two" {
availability_zone = "us-east-1b"
size = 12
tags = {
Name = "terraform-ebs"
}
}

resource "aws_s3_bucket" "three" {
bucket = "maheshuma98terra-swiggy"
}


LOOPS:

provider "aws" {
}


resource "aws_instance" "one" {
  for_each = toset(["one", "two", "three"])
  ami           = "ami-06f7633a6b8e0fb0a"
  instance_type = "t2.micro"
  tags = {
    Name = "instance-${each.key}"
  }
}

HISTORY:

  1  aws configure
    2  mkdir terraform
    3  cd terraform/
    4  sudo yum install -y yum-utils shadow-utils
    5  sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
    6  sudo yum -y install terraform
    7  vim main.tf
    8  terraform init
    9  terraform plan
   10  vim /root/.aws/credentials
   11  terraform plan
   12  terraform apply --auto-approve
   13  cat main.tf
   14  vim main.tf
   15  terraform apply --auto-approve
   16  terraform destroy --auto-approve
   17  vim main.tf
   18  terraform apply --auto-approve
   19  vim main.tf
   20  terraform apply --auto-approve
   21  vim main.tf
   22  terraform apply --auto-approve
   23  terraform destroy --auto-approve
   24  vim main.tf
   25  terraform apply --auto-approve
   26  vim main.tf
   27  terraform apply --auto-approve
   28  vim main.tf
   29  terraform apply --auto-approve
   30  terraform state list
   31  ll
   32  cat terraform.tfstate
   33  cat terraform.tfstate.backup
   34  vim -o terraform.tfstate terraform.tfstate.backup
   35  vim -O terraform.tfstate terraform.tfstate.backup
   36  ll
   37  vim main.tf
   38  terraform init
   39  terraform validate
   40  terraform apply --auto-approve
   41  terraform state list
   42  vim main.tf
   43  terraform apply --auto-approve
   44  terraform destrou --auto-approve
   45  terraform destroy --auto-approve
   46  vim main.tf
   47  terraform apply --auto-approve
   48  terraform init -reconfigure
   49  terraform apply --auto-approve
   50  terraform init
   51  terraform plan
   52  terraform init -reconfigure
   53  terraform init -migrate-state
   54  terraform apply --auto-approve
   55  vim main.tf
   56  terraform apply --auto-approve
   57  terraform state list
   58  terraform destroy --auto-approve
   59  vim main.tf
   60  history

